1) Семантика копирования: Структуры копируются по значению, в то время как классы передаются по ссылке. Это означает, что при передаче структуры в метод или при создании копии структуры создается независимая копия ее данных. В случае классов, если вы передаете объект класса в метод или другому объекту, оба объекта будут ссылаться на одни и те же данные.

Управление памятью: Объекты классов управляются сборщиком мусора (Garbage Collector), который автоматически удаляет неиспользуемые объекты, когда на них больше нет ссылок. Структуры, с другой стороны, управляются непосредственно стеком или встроенными в другие объекты, и их жизненный цикл более предсказуем.

Наследование: Классы поддерживают наследование, что означает, что один класс может наследовать функциональность другого класса. Структуры не могут наследовать другие структуры или классы, и они не могут быть базовыми классами.

Объем данных: Обычно структуры используются для небольших объемов данных, так как их копирование по значению может стать накладным в плане производительности. Классы обычно используются для более крупных и сложных объектов.

Nullable (Nullable Value Types): Структуры могут быть объявлены как nullable (Nullable<T> или T?), что позволяет им иметь значение null. В классах значение null по умолчанию.

По умолчанию: Структуры инициализируются автоматически значениями по умолчанию (нулевые или значения по умолчанию для их типов), в то время как объекты классов по умолчанию инициализируются значением null.

Полиморфизм и виртуальные методы: Классы могут содержать виртуальные методы и поддерживать полиморфизм, что позволяет создавать иерархии классов и переопределять методы. Структуры не поддерживают виртуальные методы и полиморфизм.

Производительность: Из-за семантики копирования по значению, структуры могут быть более эффективными в некоторых случаях, особенно для небольших объектов и когда объекты создаются и уничтожаются часто.

2) В C# статический конструктор (static constructor) - это специальный конструктор, который вызывается автоматически один раз, когда происходит первое обращение к классу или перед доступом к статическим членам класса.

3) Статический конструктор используется для инициализации статических членов класса или для выполнения других действий, которые должны произойти только один раз при первом использовании класса.

4)     // Модификаторы доступа (public, private, protected, internal и др.)
    // Возвращаемый тип метода (void, int, string, и т.д.)
    // Имя метода
    // Параметры метода (если они есть)
    // Тело метода

5) [модификатор_доступа] [тип_возвращаемого_значения] Имя_свойства
{
    [модификатор_доступа_сеттера] set
    {
        // Логика установки значения свойства
    }
    
    [модификатор_доступа_геттера] get
    {
        // Логика получения значения свойства и его возврата
    }
}

6) Свойство: Свойства используются для предоставления доступа к данным класса. Они позволяют скрыть детали реализации и управлять чтением и записью значений полей или вычисляемых свойств.
Свойство: Определение свойства имеет две части - геттер (get) и (при необходимости) сеттер (set). Геттер возвращает значение свойства, а сеттер устанавливает его. Геттер и сеттер могут иметь разные модификаторы доступа.
Метод: Метод определяется с помощью ключевого слова void (если он не возвращает значения) или с указанием возвращаемого типа. Метод может принимать параметры и выполнять операции внутри своего тела.
Метод: Методы служат для выполнения операций с данными, выполнения действий или возврата каких-либо значений. Они могут иметь побочные эффекты, не только получать или устанавливать значения.

